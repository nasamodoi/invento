import React, { useEffect, useState } from 'react';
import api from '../api';
import { toast } from 'react-toastify';

const Reports = () => {
  const [report, setReport] = useState(null);
  const [newNotes, setNewNotes] = useState('');
  const [editMode, setEditMode] = useState(false);
  const [reportMessage, setReportMessage] = useState('');
  const [selectedDate, setSelectedDate] = useState('');

  useEffect(() => {
    fetchTodayReport();
  }, []);

  const fetchTodayReport = async () => {
    try {
      const response = await api.get('overview/');
      setReport(response.data.report);
      setReportMessage(response.data.report_message);
    } catch (error) {
      console.error('Failed to fetch today’s report:', error);
    }
  };

  const handleFetchByDate = async () => {
    if (!selectedDate) return;

    try {
      const response = await api.get(`reports/?date=${selectedDate}`);
      if (response.data.length > 0) {
        setReport(response.data[0]);
        toast.info(`📅 Report loaded for ${selectedDate}`);
      } else {
        setReport(null);
        toast.warn(`📅 No report found for ${selectedDate}`);
      }
    } catch (error) {
      console.error('Failed to fetch report by date:', error);
      toast.error('❌ Error fetching report');
    }
  };

  const handleCreateReport = async () => {
    try {
      const response = await api.post('reports/', { notes: newNotes });
      setReport(response.data);
      setNewNotes('');
      toast.success('✅ Report generated for today');
    } catch (error) {
      console.error('Failed to create report:', error.response?.data || error.message);
      toast.error('❌ Failed to generate report');
    }
  };

  const handleUpdateReport = async () => {
    try {
      const response = await api.put(`reports/${report.id}/`, { notes: report.notes });
      setReport(response.data);
      setEditMode(false);
      toast.success('💾 Notes updated');
    } catch (error) {
      console.error('Failed to update report:', error.response?.data || error.message);
      toast.error('❌ Failed to update notes');
    }
  };

  const handleExportPDF = async () => {
    try {
      const response = await api.get(`reports/${report.id}/export_pdf/`, {
        responseType: 'blob',
      });
      const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/pdf' }));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `report_${report.id}.pdf`);
      document.body.appendChild(link);
      link.click();
    } catch (error) {
      console.error('Failed to export PDF:', error);
      toast.error('❌ PDF export failed');
    }
  };

  const formatTZS = (amount) => {
    return new Intl.NumberFormat('en-TZ', {
      style: 'currency',
      currency: 'TZS',
      minimumFractionDigits: 2,
    }).format(amount);
  };

  return (
    <div className="container mt-4">
      <h2>📊 Financial Reports</h2>

      {/* Date Picker */}
      <div className="mb-4">
        <label className="form-label">📅 View Report by Date</label>
        <div className="d-flex gap-2">
          <input
            type="date"
            className="form-control"
            value={selectedDate}
            onChange={(e) => setSelectedDate(e.target.value)}
          />
          <button className="btn btn-outline-primary" onClick={handleFetchByDate}>
            🔍 Fetch Report
          </button>
        </div>
      </div>

      {/* Create Report if none exists */}
      {!report ? (
        <div className="card p-3 mb-4">
          <p>{reportMessage}</p>
          <textarea
            className="form-control mb-2"
            rows="3"
            placeholder="Optional notes..."
            value={newNotes}
            onChange={(e) => setNewNotes(e.target.value)}
          />
          <button className="btn btn-success" onClick={handleCreateReport}>
            ➕ Generate Today's Report
          </button>
        </div>
      ) : (
        <div className="card p-4 mb-4">
          <h4>📅 Report Summary</h4>
          <p><strong>Generated By:</strong> {report.generated_by_username || '—'}</p>
          <p><strong>Date:</strong> {new Date(report.generated_at).toLocaleString()}</p>
          <p><strong>Total Sales:</strong> {formatTZS(report.total_sales)}</p>
          <p><strong>Total Purchases:</strong> {formatTZS(report.total_purchases)}</p>
          <p><strong>Total Expenses:</strong> {formatTZS(report.total_expenses)}</p>
          <p><strong>Net Profit:</strong> {formatTZS(report.net_profit)}</p>
          <p><strong>Notes:</strong> {editMode ? (
            <textarea
              className="form-control mb-2"
              rows="3"
              value={report.notes}
              onChange={(e) => setReport({ ...report, notes: e.target.value })}
            />
          ) : (
            report.notes || '—'
          )}</p>

          <div className="d-flex">
            {editMode ? (
              <>
                <button className="btn btn-primary me-2" onClick={handleUpdateReport}>💾 Save</button>
                <button className="btn btn-secondary" onClick={() => setEditMode(false)}>❌ Cancel</button>
              </>
            ) : (
              <>
                <button className="btn btn-warning me-2" onClick={() => setEditMode(true)}>✏️ Edit Notes</button>
                <button className="btn btn-secondary" onClick={handleExportPDF}>📄 Export PDF</button>
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default Reports;