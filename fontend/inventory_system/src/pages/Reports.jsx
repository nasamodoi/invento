import React, { useEffect, useState } from 'react';
import api from '../api';

const Reports = () => {
  const [reports, setReports] = useState([]);
  const [newNotes, setNewNotes] = useState('');
  const [editReport, setEditReport] = useState(null);

  useEffect(() => {
    fetchReports();
  }, []);

  const fetchReports = async () => {
    try {
      const response = await api.get('/api/reports/');
      setReports(response.data);
    } catch (error) {
      console.error('Failed to fetch reports:', error);
    }
  };

  const handleCreateReport = async () => {
    try {
      const response = await api.post('/api/reports/', { notes: newNotes });
      setReports([...reports, response.data]);
      setNewNotes('');
    } catch (error) {
      console.error('Failed to create report:', error.response?.data || error.message);
    }
  };

  const handleEdit = (report) => {
    setEditReport({ ...report });
  };

  const handleUpdateReport = async () => {
    try {
      const response = await api.put(`/api/reports/${editReport.id}/`, { notes: editReport.notes });
      setReports(reports.map(r => (r.id === editReport.id ? response.data : r)));
      setEditReport(null);
    } catch (error) {
      console.error('Failed to update report:', error.response?.data || error.message);
    }
  };

  const handleDelete = async (id) => {
    try {
      await api.delete(`/api/reports/${id}/`);
      setReports(reports.filter(r => r.id !== id));
    } catch (error) {
      console.error('Failed to delete report:', error);
    }
  };

  const handleExportPDF = async (id) => {
    try {
      const response = await api.get(`/api/reports/${id}/export_pdf/`, {
        responseType: 'blob',
      });
      const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/pdf' }));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `report_${id}.pdf`);
      document.body.appendChild(link);
      link.click();
    } catch (error) {
      console.error('Failed to export PDF:', error);
    }
  };

  // ✅ Helper function to format TZS amounts
  const formatTZS = (amount) => {
    return new Intl.NumberFormat('en-TZ', {
      style: 'currency',
      currency: 'TZS',
      minimumFractionDigits: 2,
    }).format(amount);
  };

  return (
    <div className="container mt-4">
      <h2>📊 Reports</h2>

      {/* Add New Report */}
      <div className="card p-3 mb-4">
        <h4>Generate New Report</h4>
        <textarea
          className="form-control mb-2"
          rows="3"
          placeholder="Optional notes..."
          value={newNotes}
          onChange={(e) => setNewNotes(e.target.value)}
        />
        <button className="btn btn-success" onClick={handleCreateReport}>
          ➕ Generate Report
        </button>
      </div>

      {/* Reports Table */}
      {reports.length === 0 ? (
        <div className="alert alert-warning">No reports available.</div>
      ) : (
        <table className="table table-bordered table-hover">
          <thead className="table-dark">
            <tr>
              <th>#</th>
              <th>Generated By</th>
              <th>Date</th>
              <th>Sales</th>
              <th>Purchases</th>
              <th>Expenses</th>
              <th>Net Profit</th>
              <th>Notes</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {reports.map((report, index) => (
              <tr key={report.id}>
                <td>{index + 1}</td>
                <td>{report.generated_by_username || '—'}</td>
                <td>{new Date(report.generated_at).toLocaleString()}</td>
                <td>{formatTZS(report.total_sales)}</td>
                <td>{formatTZS(report.total_purchases)}</td>
                <td>{formatTZS(report.total_expenses)}</td>
                <td>{formatTZS(report.net_profit)}</td>
                <td>{report.notes || '—'}</td>
                <td>
                  <button className="btn btn-sm btn-warning me-2" onClick={() => handleEdit(report)}>Edit</button>
                  <button className="btn btn-sm btn-danger me-2" onClick={() => handleDelete(report.id)}>Delete</button>
                  <button className="btn btn-sm btn-secondary" onClick={() => handleExportPDF(report.id)}>📄 PDF</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}

      {/* Edit Report Notes */}
      {editReport && (
        <div className="card p-3 mt-4">
          <h4>Edit Report Notes</h4>
          <textarea
            className="form-control mb-2"
            rows="3"
            value={editReport.notes}
            onChange={(e) => setEditReport({ ...editReport, notes: e.target.value })}
          />
          <div className="d-flex">
            <button className="btn btn-primary me-2" onClick={handleUpdateReport}>💾 Save</button>
            <button className="btn btn-secondary" onClick={() => setEditReport(null)}>❌ Cancel</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Reports;