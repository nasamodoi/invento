from django.db.models import Sum, F
from django.shortcuts import render
from rest_framework import viewsets, permissions
from rest_framework.permissions import IsAuthenticated, IsAdminUser
from django.contrib.auth import get_user_model
from .models import Product, Purchase, Sale, Expense, Report, Setting, User
from .serializers import (
    UserSerializer, UserRegisterSerializer,
    ProductSerializer, PurchaseSerializer,
    SaleSerializer, ExpenseSerializer,
    ReportSerializer, SettingSerializer
)
from django.http import HttpResponse
from reportlab.lib.pagesizes import A4 # pyright: ignore[reportMissingModuleSource]
from reportlab.pdfgen import canvas # pyright: ignore[reportMissingModuleSource]
from io import BytesIO
from rest_framework.decorators import action, api_view, permission_classes
from rest_framework.response import Response
from rest_framework.generics import CreateAPIView

# ---------------------
# Custom Permissions
# ---------------------
class IsAdminUserOrReadOnly(permissions.BasePermission):
    def has_permission(self, request, view):
        return request.user.is_authenticated and (
            request.user.is_admin or request.method in permissions.SAFE_METHODS
        )

class IsAdminOrStaff(permissions.BasePermission):
    def has_permission(self, request, view):
        return request.user.is_authenticated and (
            request.user.is_admin or request.user.is_staff_user
        )

# ---------------------
# User Register View (Admin Only)
# ---------------------
class UserRegisterView(CreateAPIView):
    serializer_class = UserRegisterSerializer
    permission_classes = [IsAdminUser]

# ---------------------
# User List View
# ---------------------
class UserViewSet(viewsets.ModelViewSet):
    queryset = get_user_model().objects.all()
    serializer_class = UserSerializer
    permission_classes = [IsAdminUserOrReadOnly]

# ---------------------
# Product ViewSet
# ---------------------
class ProductViewSet(viewsets.ModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    permission_classes = [IsAdminOrStaff]

# ---------------------
# Purchase ViewSet
# ---------------------
class PurchaseViewSet(viewsets.ModelViewSet):
    queryset = Purchase.objects.all()
    serializer_class = PurchaseSerializer
    permission_classes = [IsAdminOrStaff]

    def perform_create(self, serializer):
        serializer.save(purchased_by=self.request.user)

    def destroy(self, request, *args, **kwargs):
        instance = self.get_object()
        product = instance.product
        product.quantity = max(product.quantity - instance.quantity, 0)
        product.save()
        return super().destroy(request, *args, **kwargs)

# ---------------------
# Sale ViewSet
# ---------------------
class SaleViewSet(viewsets.ModelViewSet):
    queryset = Sale.objects.all()
    serializer_class = SaleSerializer
    permission_classes = [IsAdminOrStaff]

    def perform_create(self, serializer):
        serializer.save(sold_by=self.request.user)

    def destroy(self, request, *args, **kwargs):
        instance = self.get_object()
        product = instance.product
        product.quantity = max(product.quantity + instance.quantity, 0)
        product.save()
        return super().destroy(request, *args, **kwargs)

# ---------------------
# Expense ViewSet
# ---------------------
class ExpenseViewSet(viewsets.ModelViewSet):
    queryset = Expense.objects.all()
    serializer_class = ExpenseSerializer
    permission_classes = [IsAdminOrStaff]

    def perform_create(self, serializer):
        serializer.save(spent_by=self.request.user)

# ---------------------
# Report ViewSet
# ---------------------
class ReportViewSet(viewsets.ModelViewSet):
    queryset = Report.objects.all()
    serializer_class = ReportSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        queryset = Report.objects.all()
        date_str = self.request.query_params.get('date')
        if date_str:
            queryset = queryset.filter(generated_at__date=date_str)
        return queryset

    def perform_create(self, serializer):
        report = serializer.save(generated_by=self.request.user)
        report.generate_all_metrics()

    @action(detail=True, methods=['get'], permission_classes=[IsAdminUser])
    def export_pdf(self, request, pk=None):
        report = self.get_object()
        buffer = BytesIO()
        p = canvas.Canvas(buffer, pagesize=A4)
        width, height = A4

        p.setFont("Helvetica-Bold", 16)
        p.drawString(50, height - 50, f"ðŸ“Š Financial Report #{report.id}")

        p.setFont("Helvetica", 12)
        p.drawString(50, height - 80, f"Generated By: {report.generated_by.username if report.generated_by else 'â€”'}")
        p.drawString(50, height - 100, f"Date: {report.generated_at.strftime('%Y-%m-%d %H:%M')}")

        y = height - 140
        p.drawString(50, y, f"Total Sales: TSh {report.total_sales:,.2f}")
        p.drawString(50, y - 20, f"Total Purchases: TSh {report.total_purchases:,.2f}")
        p.drawString(50, y - 40, f"Total Expenses: TSh {report.total_expenses:,.2f}")
        p.drawString(50, y - 60, f"Net Profit: TSh {report.net_profit:,.2f}")
        p.drawString(50, y - 80, f"Total Product Value: TSh {report.total_product_price:,.2f}")

        p.drawString(50, y - 120, "Notes:")
        text_obj = p.beginText(50, y - 140)
        text_obj.setFont("Helvetica-Oblique", 11)
        for line in report.notes.splitlines():
            text_obj.textLine(line)
        p.drawText(text_obj)

        p.showPage()
        p.save()
        buffer.seek(0)
        return HttpResponse(buffer, content_type='application/pdf')

# ---------------------
# Setting ViewSet
# ---------------------
class SettingViewSet(viewsets.ModelViewSet):
    queryset = Setting.objects.all()
    serializer_class = SettingSerializer
    permission_classes = [IsAdminUserOrReadOnly]

# ---------------------
# System Overview View
# ---------------------
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def overview(request):
    total_sales = Sale.objects.aggregate(total=Sum('amount'))['total'] or 0
    total_purchases = Purchase.objects.aggregate(total=Sum('amount'))['total'] or 0
    total_expenses = Expense.objects.aggregate(total=Sum('amount'))['total'] or 0
    net_profit = total_sales - total_purchases - total_expenses
    total_product_price = Product.objects.aggregate(
        total=Sum(F('buying_price') * F('quantity'))
    )['total'] or 0
    low_stock_count = Product.objects.filter(quantity__lte=2).count()  # âœ… added

    stats = {
        'total_products': Product.objects.count(),
        'total_users': User.objects.count(),
        'total_sales': total_sales,
        'total_purchases': total_purchases,
        'total_expenses': total_expenses,
        'net_profit': net_profit,
        'total_product_price': total_product_price,
        'low_stock_products': low_stock_count  # âœ… added
    }

    recent_sales = Sale.objects.order_by('-sold_at')[:2]
    recent_purchases = Purchase.objects.order_by('-purchased_at')[:2]
    recent_expenses = Expense.objects.order_by('-spent_at')[:1]

    recent = []

    for sale in recent_sales:
        recent.append(f"ðŸ›’ Sold {sale.quantity} Ã— {sale.product.name} for {sale.amount} TZS")

    for purchase in recent_purchases:
        recent.append(f"ðŸ“¦ Purchased {purchase.quantity} Ã— {purchase.product.name} for {purchase.amount} TZS")

    for expense in recent_expenses:
        recent.append(f"ðŸ’¸ Spent {expense.amount} TZS on {expense.description}")

    return Response({
        'stats': stats,
        'recent': recent
    })

# ---------------------
# Report Dates Endpoint
# ---------------------
@api_view(['GET'])
@permission_classes([IsAdminUser])
def report_dates(request):
    dates = Report.objects.values_list('generated_at', flat=True)
    unique_dates = sorted(set(dt.date() for dt in dates))
    return Response({'dates': [d.isoformat() for d in unique_dates]})

# ---------------------
# Frontend Entry Point
# ---------------------
def frontend(request):
    return render(request, 'index.html')